{
module QL_Lexer
open System
open QL_Parser
open Microsoft.FSharp.Text.Lexing

let keywords =
    [
        "form", FORM;
        "if", IF;
        "boolean", QLBOOL;
        "string", QLSTRING;
        "integer", QLINT;
        "decimal", QLDECIMAL;
    ] |> Map.ofList

let symbols =
    [
        "==",    EQ;
        "!=",   NE;
        "<",    LT;
        "<=",   LE;
        ">",    GT;
        ">=",   GE;
        "&&",   AND;
        "||",   OR;
        "!",    NOT;
        "+",    PLUS;
        "-",    MINUS;
        "*",    MULT;
        "/",    DIV;
        "{",    CB_OPEN;
        "}",    CB_CLOSE;
        "(",    B_OPEN;
        ")",    B_CLOSE;
        ":",    COLON;
        "=",    ASSIGN;
    ] |> Map.ofList
}

let char        = ['a'-'z' 'A'-'Z']
let digit       = ['0'-'9']
let int         = '-'?digit+
let float       = '-'?digit+ '.' digit+
let identifier  = char(char|digit|['-' '_' '.'])*
let whitespace  = [' ' '\t']
let newline     = "\n\r" | "\r\n" | '\n' | '\r'
let symbol      = ">" | ">=" | "<" | "<=" | "==" | "!=" | "&&" | "||" | "!" // Boolean
                | "+" | "-" | "*" | "/"                                     // Arithmetic
                | "{" | "}" | "(" | ")" | ":" | "="                         // Structural


rule tokenize = parse   
| whitespace    { tokenize lexbuf }   
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
| int           { INT(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| float         { DECIMAL(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| "\""			{ LABEL(string lexbuf.StartPos "" lexbuf) }
| "true"		{ BOOL(true) }
| "false"		{ BOOL(false) }
| symbol		{ symbols.[LexBuffer<_>.LexemeString lexbuf] }
| identifier    { match keywords.TryFind(LexBuffer<_>.LexemeString lexbuf) with
                  | Some(token) -> token
                  | None -> IDENTIFIER(LexBuffer<_>.LexemeString lexbuf) }
| eof           { END }
and string pos res = parse
| "\\\""		{ string pos (res + "\\\"") lexbuf }
| "\""			{ res }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; string pos (res + "\n") lexbuf; }
| eof			{ failwithf "Unterminated string" }
| _				{ string pos (res + (LexBuffer<_>.LexemeString lexbuf)) lexbuf }


