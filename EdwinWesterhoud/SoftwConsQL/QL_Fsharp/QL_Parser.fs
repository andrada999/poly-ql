// Implementation file for parser generated by fsyacc
module QL_Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"

open System
open QL_Grammar
open Microsoft.FSharp.Collections

# 12 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | END
  | EQ
  | NE
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | NOT
  | PLUS
  | MINUS
  | MULT
  | DIV
  | QLBOOL
  | QLSTRING
  | QLINT
  | QLDATE
  | QLDECIMAL
  | QLMONEY
  | MONEY of (float)
  | DECIMAL of (float)
  | DATE of (float)
  | INT of (int)
  | STRING of (string)
  | BOOL of (bool)
  | LABEL of (string)
  | IDENTIFIER of (string)
  | COLON
  | B_OPEN
  | B_CLOSE
  | CB_OPEN
  | CB_CLOSE
  | IF
  | FORM
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_END
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_QLBOOL
    | TOKEN_QLSTRING
    | TOKEN_QLINT
    | TOKEN_QLDATE
    | TOKEN_QLDECIMAL
    | TOKEN_QLMONEY
    | TOKEN_MONEY
    | TOKEN_DECIMAL
    | TOKEN_DATE
    | TOKEN_INT
    | TOKEN_STRING
    | TOKEN_BOOL
    | TOKEN_LABEL
    | TOKEN_IDENTIFIER
    | TOKEN_COLON
    | TOKEN_B_OPEN
    | TOKEN_B_CLOSE
    | TOKEN_CB_OPEN
    | TOKEN_CB_CLOSE
    | TOKEN_IF
    | TOKEN_FORM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_stmtList
    | NONTERM_stmt
    | NONTERM_assignment
    | NONTERM_question
    | NONTERM_conditional
    | NONTERM_qlType
    | NONTERM_expType
    | NONTERM_arithmeticType
    | NONTERM_expression
    | NONTERM_booleanExpr
    | NONTERM_arithmeticExpr

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | END  -> 0 
  | EQ  -> 1 
  | NE  -> 2 
  | LT  -> 3 
  | LE  -> 4 
  | GT  -> 5 
  | GE  -> 6 
  | AND  -> 7 
  | OR  -> 8 
  | NOT  -> 9 
  | PLUS  -> 10 
  | MINUS  -> 11 
  | MULT  -> 12 
  | DIV  -> 13 
  | QLBOOL  -> 14 
  | QLSTRING  -> 15 
  | QLINT  -> 16 
  | QLDATE  -> 17 
  | QLDECIMAL  -> 18 
  | QLMONEY  -> 19 
  | MONEY _ -> 20 
  | DECIMAL _ -> 21 
  | DATE _ -> 22 
  | INT _ -> 23 
  | STRING _ -> 24 
  | BOOL _ -> 25 
  | LABEL _ -> 26 
  | IDENTIFIER _ -> 27 
  | COLON  -> 28 
  | B_OPEN  -> 29 
  | B_CLOSE  -> 30 
  | CB_OPEN  -> 31 
  | CB_CLOSE  -> 32 
  | IF  -> 33 
  | FORM  -> 34 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_END 
  | 1 -> TOKEN_EQ 
  | 2 -> TOKEN_NE 
  | 3 -> TOKEN_LT 
  | 4 -> TOKEN_LE 
  | 5 -> TOKEN_GT 
  | 6 -> TOKEN_GE 
  | 7 -> TOKEN_AND 
  | 8 -> TOKEN_OR 
  | 9 -> TOKEN_NOT 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_MINUS 
  | 12 -> TOKEN_MULT 
  | 13 -> TOKEN_DIV 
  | 14 -> TOKEN_QLBOOL 
  | 15 -> TOKEN_QLSTRING 
  | 16 -> TOKEN_QLINT 
  | 17 -> TOKEN_QLDATE 
  | 18 -> TOKEN_QLDECIMAL 
  | 19 -> TOKEN_QLMONEY 
  | 20 -> TOKEN_MONEY 
  | 21 -> TOKEN_DECIMAL 
  | 22 -> TOKEN_DATE 
  | 23 -> TOKEN_INT 
  | 24 -> TOKEN_STRING 
  | 25 -> TOKEN_BOOL 
  | 26 -> TOKEN_LABEL 
  | 27 -> TOKEN_IDENTIFIER 
  | 28 -> TOKEN_COLON 
  | 29 -> TOKEN_B_OPEN 
  | 30 -> TOKEN_B_CLOSE 
  | 31 -> TOKEN_CB_OPEN 
  | 32 -> TOKEN_CB_CLOSE 
  | 33 -> TOKEN_IF 
  | 34 -> TOKEN_FORM 
  | 37 -> TOKEN_end_of_input
  | 35 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_stmtList 
    | 3 -> NONTERM_stmtList 
    | 4 -> NONTERM_stmtList 
    | 5 -> NONTERM_stmt 
    | 6 -> NONTERM_stmt 
    | 7 -> NONTERM_stmt 
    | 8 -> NONTERM_assignment 
    | 9 -> NONTERM_question 
    | 10 -> NONTERM_conditional 
    | 11 -> NONTERM_qlType 
    | 12 -> NONTERM_qlType 
    | 13 -> NONTERM_qlType 
    | 14 -> NONTERM_qlType 
    | 15 -> NONTERM_qlType 
    | 16 -> NONTERM_qlType 
    | 17 -> NONTERM_expType 
    | 18 -> NONTERM_expType 
    | 19 -> NONTERM_expType 
    | 20 -> NONTERM_arithmeticType 
    | 21 -> NONTERM_arithmeticType 
    | 22 -> NONTERM_arithmeticType 
    | 23 -> NONTERM_arithmeticType 
    | 24 -> NONTERM_expression 
    | 25 -> NONTERM_expression 
    | 26 -> NONTERM_booleanExpr 
    | 27 -> NONTERM_booleanExpr 
    | 28 -> NONTERM_booleanExpr 
    | 29 -> NONTERM_booleanExpr 
    | 30 -> NONTERM_booleanExpr 
    | 31 -> NONTERM_booleanExpr 
    | 32 -> NONTERM_booleanExpr 
    | 33 -> NONTERM_booleanExpr 
    | 34 -> NONTERM_booleanExpr 
    | 35 -> NONTERM_booleanExpr 
    | 36 -> NONTERM_arithmeticExpr 
    | 37 -> NONTERM_arithmeticExpr 
    | 38 -> NONTERM_arithmeticExpr 
    | 39 -> NONTERM_arithmeticExpr 
    | 40 -> NONTERM_arithmeticExpr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 37 
let _fsyacc_tagOfErrorTerminal = 35

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | END  -> "END" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | QLBOOL  -> "QLBOOL" 
  | QLSTRING  -> "QLSTRING" 
  | QLINT  -> "QLINT" 
  | QLDATE  -> "QLDATE" 
  | QLDECIMAL  -> "QLDECIMAL" 
  | QLMONEY  -> "QLMONEY" 
  | MONEY _ -> "MONEY" 
  | DECIMAL _ -> "DECIMAL" 
  | DATE _ -> "DATE" 
  | INT _ -> "INT" 
  | STRING _ -> "STRING" 
  | BOOL _ -> "BOOL" 
  | LABEL _ -> "LABEL" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | COLON  -> "COLON" 
  | B_OPEN  -> "B_OPEN" 
  | B_CLOSE  -> "B_CLOSE" 
  | CB_OPEN  -> "CB_OPEN" 
  | CB_CLOSE  -> "CB_CLOSE" 
  | IF  -> "IF" 
  | FORM  -> "FORM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | END  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | QLBOOL  -> (null : System.Object) 
  | QLSTRING  -> (null : System.Object) 
  | QLINT  -> (null : System.Object) 
  | QLDATE  -> (null : System.Object) 
  | QLDECIMAL  -> (null : System.Object) 
  | QLMONEY  -> (null : System.Object) 
  | MONEY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DECIMAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LABEL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLON  -> (null : System.Object) 
  | B_OPEN  -> (null : System.Object) 
  | B_CLOSE  -> (null : System.Object) 
  | CB_OPEN  -> (null : System.Object) 
  | CB_CLOSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FORM  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 4us; 5us; 8us; 9us; 25us; 26us; 3us; 65535us; 4us; 8us; 8us; 8us; 25us; 8us; 3us; 65535us; 4us; 10us; 8us; 10us; 25us; 10us; 3us; 65535us; 4us; 11us; 8us; 11us; 25us; 11us; 3us; 65535us; 4us; 12us; 8us; 12us; 25us; 12us; 1us; 65535us; 15us; 20us; 1us; 65535us; 15us; 16us; 6us; 65535us; 15us; 36us; 17us; 62us; 67us; 62us; 68us; 62us; 69us; 62us; 70us; 62us; 1us; 65535us; 17us; 18us; 11us; 65535us; 17us; 41us; 22us; 23us; 44us; 45us; 54us; 46us; 55us; 47us; 56us; 48us; 57us; 49us; 58us; 50us; 59us; 51us; 60us; 52us; 61us; 53us; 5us; 65535us; 17us; 42us; 67us; 63us; 68us; 64us; 69us; 65us; 70us; 66us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 15us; 19us; 23us; 25us; 27us; 34us; 36us; 48us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 2us; 8us; 9us; 2us; 8us; 9us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 9us; 10us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 9us; 24us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 5us; 25us; 37us; 38us; 39us; 40us; 1us; 26us; 1us; 27us; 9us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 9us; 28us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 9us; 28us; 29us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 9us; 28us; 29us; 30us; 30us; 31us; 32us; 33us; 34us; 35us; 9us; 28us; 29us; 30us; 31us; 31us; 32us; 33us; 34us; 35us; 9us; 28us; 29us; 30us; 31us; 32us; 32us; 33us; 34us; 35us; 9us; 28us; 29us; 30us; 31us; 32us; 33us; 33us; 34us; 35us; 9us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 34us; 35us; 9us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 35us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 5us; 37us; 37us; 38us; 39us; 40us; 5us; 37us; 38us; 38us; 39us; 40us; 5us; 37us; 38us; 39us; 39us; 40us; 5us; 37us; 38us; 39us; 40us; 40us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 19us; 21us; 23us; 25us; 27us; 30us; 33us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 104us; 110us; 112us; 114us; 124us; 134us; 144us; 154us; 164us; 174us; 184us; 194us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 228us; 234us; 240us; 246us; 248us; 250us; 252us; |]
let _fsyacc_action_rows = 71
let _fsyacc_actionTableElements = [|1us; 32768us; 34us; 2us; 0us; 49152us; 1us; 32768us; 27us; 3us; 1us; 32768us; 31us; 4us; 2us; 16386us; 27us; 13us; 33us; 21us; 1us; 32768us; 32us; 6us; 1us; 32768us; 0us; 7us; 0us; 16385us; 2us; 16386us; 27us; 13us; 33us; 21us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 1us; 32768us; 28us; 14us; 1us; 32768us; 26us; 15us; 12us; 32768us; 14us; 28us; 15us; 29us; 16us; 30us; 17us; 31us; 18us; 32us; 19us; 33us; 20us; 40us; 21us; 39us; 22us; 38us; 23us; 37us; 24us; 34us; 25us; 35us; 1us; 32768us; 29us; 17us; 6us; 32768us; 9us; 44us; 20us; 40us; 21us; 39us; 22us; 38us; 23us; 37us; 25us; 43us; 1us; 32768us; 30us; 19us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 29us; 22us; 2us; 32768us; 9us; 44us; 25us; 43us; 9us; 32768us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 30us; 24us; 1us; 32768us; 31us; 25us; 2us; 16386us; 27us; 13us; 33us; 21us; 1us; 32768us; 32us; 27us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 8us; 16408us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 4us; 16409us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 0us; 16410us; 2us; 32768us; 9us; 44us; 25us; 43us; 8us; 16411us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 8us; 16412us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 8us; 16413us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 8us; 16414us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 8us; 16415us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 8us; 16416us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 8us; 16417us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 8us; 16418us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 8us; 16419us; 1us; 60us; 2us; 61us; 3us; 56us; 4us; 58us; 5us; 57us; 6us; 59us; 7us; 54us; 8us; 55us; 2us; 32768us; 9us; 44us; 25us; 43us; 2us; 32768us; 9us; 44us; 25us; 43us; 2us; 32768us; 9us; 44us; 25us; 43us; 2us; 32768us; 9us; 44us; 25us; 43us; 2us; 32768us; 9us; 44us; 25us; 43us; 2us; 32768us; 9us; 44us; 25us; 43us; 2us; 32768us; 9us; 44us; 25us; 43us; 2us; 32768us; 9us; 44us; 25us; 43us; 0us; 16420us; 4us; 16421us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 4us; 16422us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 4us; 16423us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 4us; 16424us; 10us; 67us; 11us; 68us; 12us; 69us; 13us; 70us; 4us; 32768us; 20us; 40us; 21us; 39us; 22us; 38us; 23us; 37us; 4us; 32768us; 20us; 40us; 21us; 39us; 22us; 38us; 23us; 37us; 4us; 32768us; 20us; 40us; 21us; 39us; 22us; 38us; 23us; 37us; 4us; 32768us; 20us; 40us; 21us; 39us; 22us; 38us; 23us; 37us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 7us; 10us; 12us; 14us; 15us; 18us; 19us; 20us; 21us; 22us; 24us; 26us; 39us; 41us; 48us; 50us; 51us; 52us; 54us; 57us; 67us; 69us; 72us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 81us; 82us; 83us; 84us; 85us; 86us; 87us; 88us; 97us; 102us; 103us; 106us; 115us; 124us; 133us; 142us; 151us; 160us; 169us; 178us; 187us; 190us; 193us; 196us; 199us; 202us; 205us; 208us; 211us; 212us; 217us; 222us; 227us; 232us; 237us; 242us; 247us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 6us; 0us; 1us; 2us; 1us; 1us; 1us; 7us; 4us; 7us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 5us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 16385us; 65535us; 16388us; 16389us; 16390us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 323 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : QL_Grammar.questionaire)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 332 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                  
                                                     {   ID = _2;
                                                         Questions = _4 }
                                                 
                   )
# 36 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : QL_Grammar.questionaire));
# 347 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                   [] 
                   )
# 42 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmtList));
# 357 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                   [_1] 
                   )
# 43 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmtList));
# 368 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                   _1 :: _2 
                   )
# 44 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmtList));
# 380 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'assignment)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                           _1 
                   )
# 47 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmt));
# 391 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'question)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                           _1 
                   )
# 48 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmt));
# 402 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditional)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                           _1 
                   )
# 49 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmt));
# 413 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expType)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                                                    Assignment({
                                                                                                 ID          = _1;
                                                                                                 Label       = _3;
                                                                                                 Type        = _4;
                                                                                                 Expressions = _6;
                                                                                             }) 
                   )
# 52 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'assignment));
# 432 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'qlType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                         Question({ 
                                                                     ID      = _1;
                                                                     Label   = _3;
                                                                     Type    = _4;
                                                                 }) 
                   )
# 60 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'question));
# 449 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                    Conditional(_3, _6) 
                   )
# 69 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'conditional));
# 461 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLBool 
                   )
# 72 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 471 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLString 
                   )
# 73 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 481 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLInt 
                   )
# 74 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 491 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLDate 
                   )
# 75 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 501 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLDecimal 
                   )
# 76 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 511 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLMoney 
                   )
# 77 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 521 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               String(_1) 
                   )
# 80 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expType));
# 532 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Bool(_1) 
                   )
# 81 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expType));
# 543 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Arithmetic(_1) 
                   )
# 82 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expType));
# 554 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Int(_1) 
                   )
# 85 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticType));
# 565 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Date(_1) 
                   )
# 86 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticType));
# 576 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Decimal(_1) 
                   )
# 87 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticType));
# 587 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Money(_1) 
                   )
# 88 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticType));
# 598 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               BooleanExpr(_1) 
                   )
# 91 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 609 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               ArithmeticExpr(_1) 
                   )
# 92 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 620 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BoolVal(_1) 
                   )
# 95 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 631 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Neg(_2) 
                   )
# 96 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 642 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Cond(_1, And, _3) 
                   )
# 97 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 654 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Cond(_1, Or, _3) 
                   )
# 98 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 666 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Cond(_1, Lt, _3) 
                   )
# 99 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 678 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Cond(_1, Gt, _3) 
                   )
# 100 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 690 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Cond(_1, Le, _3) 
                   )
# 101 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 702 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Cond(_1, Ge, _3) 
                   )
# 102 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 714 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Cond(_1, Eq, _3) 
                   )
# 103 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 726 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'booleanExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Cond(_1, Ne, _3) 
                   )
# 104 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'booleanExpr));
# 738 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                                   ArithmeticType(_1) 
                   )
# 107 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticExpr));
# 749 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                                   ArithmeticOp(_1, Plus, _3) 
                   )
# 108 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticExpr));
# 761 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                                   ArithmeticOp(_1, Minus, _3) 
                   )
# 109 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticExpr));
# 773 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                                   ArithmeticOp(_1, Mult, _3) 
                   )
# 110 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticExpr));
# 785 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                                   ArithmeticOp(_1, Div, _3) 
                   )
# 111 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'arithmeticExpr));
|]
# 798 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 38;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : QL_Grammar.questionaire =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
