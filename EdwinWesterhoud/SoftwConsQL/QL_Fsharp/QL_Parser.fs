// Implementation file for parser generated by fsyacc
module QL_Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"

open System
open QL_Grammar
open Microsoft.FSharp.Collections

# 12 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | END
  | EQ
  | NE
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | PLUS
  | MINUS
  | MULT
  | DIV
  | NOT
  | QLBOOL
  | QLSTRING
  | QLINT
  | QLDECIMAL
  | DECIMAL of (float)
  | INT of (int)
  | STRING of (string)
  | BOOL of (bool)
  | LABEL of (string)
  | IDENTIFIER of (string)
  | ASSIGN
  | COLON
  | B_OPEN
  | B_CLOSE
  | CB_OPEN
  | CB_CLOSE
  | IF
  | ELSE
  | FORM
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_END
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_NOT
    | TOKEN_QLBOOL
    | TOKEN_QLSTRING
    | TOKEN_QLINT
    | TOKEN_QLDECIMAL
    | TOKEN_DECIMAL
    | TOKEN_INT
    | TOKEN_STRING
    | TOKEN_BOOL
    | TOKEN_LABEL
    | TOKEN_IDENTIFIER
    | TOKEN_ASSIGN
    | TOKEN_COLON
    | TOKEN_B_OPEN
    | TOKEN_B_CLOSE
    | TOKEN_CB_OPEN
    | TOKEN_CB_CLOSE
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_FORM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_stmtList
    | NONTERM_stmt
    | NONTERM_assignment
    | NONTERM_question
    | NONTERM_ifElseConditional
    | NONTERM_ifConditional
    | NONTERM_qlType
    | NONTERM_literal
    | NONTERM_expression

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | END  -> 0 
  | EQ  -> 1 
  | NE  -> 2 
  | LT  -> 3 
  | LE  -> 4 
  | GT  -> 5 
  | GE  -> 6 
  | AND  -> 7 
  | OR  -> 8 
  | PLUS  -> 9 
  | MINUS  -> 10 
  | MULT  -> 11 
  | DIV  -> 12 
  | NOT  -> 13 
  | QLBOOL  -> 14 
  | QLSTRING  -> 15 
  | QLINT  -> 16 
  | QLDECIMAL  -> 17 
  | DECIMAL _ -> 18 
  | INT _ -> 19 
  | STRING _ -> 20 
  | BOOL _ -> 21 
  | LABEL _ -> 22 
  | IDENTIFIER _ -> 23 
  | ASSIGN  -> 24 
  | COLON  -> 25 
  | B_OPEN  -> 26 
  | B_CLOSE  -> 27 
  | CB_OPEN  -> 28 
  | CB_CLOSE  -> 29 
  | IF  -> 30 
  | ELSE  -> 31 
  | FORM  -> 32 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_END 
  | 1 -> TOKEN_EQ 
  | 2 -> TOKEN_NE 
  | 3 -> TOKEN_LT 
  | 4 -> TOKEN_LE 
  | 5 -> TOKEN_GT 
  | 6 -> TOKEN_GE 
  | 7 -> TOKEN_AND 
  | 8 -> TOKEN_OR 
  | 9 -> TOKEN_PLUS 
  | 10 -> TOKEN_MINUS 
  | 11 -> TOKEN_MULT 
  | 12 -> TOKEN_DIV 
  | 13 -> TOKEN_NOT 
  | 14 -> TOKEN_QLBOOL 
  | 15 -> TOKEN_QLSTRING 
  | 16 -> TOKEN_QLINT 
  | 17 -> TOKEN_QLDECIMAL 
  | 18 -> TOKEN_DECIMAL 
  | 19 -> TOKEN_INT 
  | 20 -> TOKEN_STRING 
  | 21 -> TOKEN_BOOL 
  | 22 -> TOKEN_LABEL 
  | 23 -> TOKEN_IDENTIFIER 
  | 24 -> TOKEN_ASSIGN 
  | 25 -> TOKEN_COLON 
  | 26 -> TOKEN_B_OPEN 
  | 27 -> TOKEN_B_CLOSE 
  | 28 -> TOKEN_CB_OPEN 
  | 29 -> TOKEN_CB_CLOSE 
  | 30 -> TOKEN_IF 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_FORM 
  | 35 -> TOKEN_end_of_input
  | 33 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_stmtList 
    | 3 -> NONTERM_stmtList 
    | 4 -> NONTERM_stmtList 
    | 5 -> NONTERM_stmt 
    | 6 -> NONTERM_stmt 
    | 7 -> NONTERM_stmt 
    | 8 -> NONTERM_stmt 
    | 9 -> NONTERM_assignment 
    | 10 -> NONTERM_question 
    | 11 -> NONTERM_ifElseConditional 
    | 12 -> NONTERM_ifConditional 
    | 13 -> NONTERM_qlType 
    | 14 -> NONTERM_qlType 
    | 15 -> NONTERM_qlType 
    | 16 -> NONTERM_qlType 
    | 17 -> NONTERM_literal 
    | 18 -> NONTERM_literal 
    | 19 -> NONTERM_literal 
    | 20 -> NONTERM_literal 
    | 21 -> NONTERM_literal 
    | 22 -> NONTERM_expression 
    | 23 -> NONTERM_expression 
    | 24 -> NONTERM_expression 
    | 25 -> NONTERM_expression 
    | 26 -> NONTERM_expression 
    | 27 -> NONTERM_expression 
    | 28 -> NONTERM_expression 
    | 29 -> NONTERM_expression 
    | 30 -> NONTERM_expression 
    | 31 -> NONTERM_expression 
    | 32 -> NONTERM_expression 
    | 33 -> NONTERM_expression 
    | 34 -> NONTERM_expression 
    | 35 -> NONTERM_expression 
    | 36 -> NONTERM_expression 
    | 37 -> NONTERM_expression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 35 
let _fsyacc_tagOfErrorTerminal = 33

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | END  -> "END" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | NOT  -> "NOT" 
  | QLBOOL  -> "QLBOOL" 
  | QLSTRING  -> "QLSTRING" 
  | QLINT  -> "QLINT" 
  | QLDECIMAL  -> "QLDECIMAL" 
  | DECIMAL _ -> "DECIMAL" 
  | INT _ -> "INT" 
  | STRING _ -> "STRING" 
  | BOOL _ -> "BOOL" 
  | LABEL _ -> "LABEL" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | ASSIGN  -> "ASSIGN" 
  | COLON  -> "COLON" 
  | B_OPEN  -> "B_OPEN" 
  | B_CLOSE  -> "B_CLOSE" 
  | CB_OPEN  -> "CB_OPEN" 
  | CB_CLOSE  -> "CB_CLOSE" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | FORM  -> "FORM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | END  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | QLBOOL  -> (null : System.Object) 
  | QLSTRING  -> (null : System.Object) 
  | QLINT  -> (null : System.Object) 
  | QLDECIMAL  -> (null : System.Object) 
  | DECIMAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LABEL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ASSIGN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | B_OPEN  -> (null : System.Object) 
  | B_CLOSE  -> (null : System.Object) 
  | CB_OPEN  -> (null : System.Object) 
  | CB_CLOSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FORM  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 4us; 65535us; 4us; 5us; 8us; 9us; 24us; 25us; 28us; 29us; 4us; 65535us; 4us; 8us; 8us; 8us; 24us; 8us; 28us; 8us; 4us; 65535us; 4us; 10us; 8us; 10us; 24us; 10us; 28us; 10us; 4us; 65535us; 4us; 11us; 8us; 11us; 24us; 11us; 28us; 11us; 4us; 65535us; 4us; 12us; 8us; 12us; 24us; 12us; 28us; 12us; 4us; 65535us; 4us; 13us; 8us; 13us; 24us; 13us; 28us; 13us; 1us; 65535us; 18us; 19us; 16us; 65535us; 16us; 44us; 21us; 44us; 40us; 44us; 45us; 44us; 59us; 44us; 60us; 44us; 61us; 44us; 62us; 44us; 63us; 44us; 64us; 44us; 65us; 44us; 66us; 44us; 67us; 44us; 68us; 44us; 69us; 44us; 70us; 44us; 16us; 65535us; 16us; 17us; 21us; 22us; 40us; 41us; 45us; 46us; 59us; 47us; 60us; 48us; 61us; 49us; 62us; 50us; 63us; 51us; 64us; 52us; 65us; 53us; 66us; 54us; 67us; 55us; 68us; 56us; 69us; 57us; 70us; 58us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 8us; 13us; 18us; 23us; 28us; 33us; 35us; 52us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 2us; 9us; 10us; 2us; 9us; 10us; 1us; 9us; 13us; 9us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 1us; 10us; 1us; 10us; 2us; 11us; 12us; 2us; 11us; 12us; 14us; 11us; 12us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 2us; 11us; 12us; 2us; 11us; 12us; 2us; 11us; 12us; 2us; 11us; 12us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 13us; 22us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 13us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 30us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 30us; 31us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 32us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 33us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 34us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 35us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 36us; 37us; 13us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 37us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 19us; 21us; 23us; 25us; 27us; 29us; 32us; 35us; 37us; 51us; 53us; 55us; 58us; 61us; 76us; 79us; 82us; 85us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 130us; 132us; 134us; 136us; 138us; 152us; 166us; 180us; 194us; 208us; 222us; 236us; 250us; 264us; 278us; 292us; 306us; 320us; 322us; 324us; 326us; 328us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; |]
let _fsyacc_action_rows = 71
let _fsyacc_actionTableElements = [|1us; 32768us; 32us; 2us; 0us; 49152us; 1us; 32768us; 23us; 3us; 1us; 32768us; 28us; 4us; 2us; 16386us; 22us; 14us; 30us; 20us; 1us; 32768us; 29us; 6us; 1us; 32768us; 0us; 7us; 0us; 16385us; 2us; 16386us; 22us; 14us; 30us; 20us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 1us; 32768us; 23us; 15us; 2us; 32768us; 24us; 16us; 25us; 18us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 12us; 16393us; 1us; 65us; 2us; 66us; 3us; 61us; 4us; 63us; 5us; 62us; 6us; 64us; 7us; 59us; 8us; 60us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 4us; 32768us; 14us; 31us; 15us; 32us; 16us; 33us; 17us; 34us; 0us; 16394us; 1us; 32768us; 26us; 21us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 13us; 32768us; 1us; 65us; 2us; 66us; 3us; 61us; 4us; 63us; 5us; 62us; 6us; 64us; 7us; 59us; 8us; 60us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 27us; 23us; 1us; 32768us; 28us; 24us; 2us; 16386us; 22us; 14us; 30us; 20us; 1us; 32768us; 29us; 26us; 1us; 16396us; 31us; 27us; 1us; 32768us; 28us; 28us; 2us; 16386us; 22us; 14us; 30us; 20us; 1us; 32768us; 29us; 30us; 0us; 16395us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 13us; 32768us; 1us; 65us; 2us; 66us; 3us; 61us; 4us; 63us; 5us; 62us; 6us; 64us; 7us; 59us; 8us; 60us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 27us; 42us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 0us; 16409us; 10us; 16410us; 1us; 65us; 2us; 66us; 3us; 61us; 4us; 63us; 5us; 62us; 6us; 64us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 10us; 16411us; 1us; 65us; 2us; 66us; 3us; 61us; 4us; 63us; 5us; 62us; 6us; 64us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 4us; 16412us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 4us; 16413us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 4us; 16414us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 4us; 16415us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 4us; 16416us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 4us; 16417us; 9us; 67us; 10us; 68us; 11us; 69us; 12us; 70us; 2us; 16418us; 11us; 69us; 12us; 70us; 2us; 16419us; 11us; 69us; 12us; 70us; 0us; 16420us; 0us; 16421us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; 8us; 32768us; 13us; 45us; 18us; 39us; 19us; 38us; 20us; 35us; 21us; 37us; 22us; 36us; 23us; 43us; 26us; 40us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 7us; 10us; 12us; 14us; 15us; 18us; 19us; 20us; 21us; 22us; 23us; 25us; 28us; 37us; 50us; 55us; 56us; 58us; 67us; 81us; 83us; 86us; 88us; 90us; 92us; 95us; 97us; 98us; 99us; 100us; 101us; 102us; 103us; 104us; 105us; 106us; 107us; 116us; 130us; 131us; 132us; 133us; 142us; 143us; 154us; 165us; 170us; 175us; 180us; 185us; 190us; 195us; 198us; 201us; 202us; 203us; 212us; 221us; 230us; 239us; 248us; 257us; 266us; 275us; 284us; 293us; 302us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 6us; 0us; 1us; 2us; 1us; 1us; 1us; 1us; 4us; 4us; 11us; 7us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 16385us; 65535us; 16388us; 16389us; 16390us; 16391us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 65535us; 65535us; 16406us; 16407us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 306 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : QL_Grammar.questionaire)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 315 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                      
                                                         {   ID          = _2;
                                                             Statements  = _4 }
                                                     
                   )
# 41 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : QL_Grammar.questionaire));
# 330 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                           [] 
                   )
# 47 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmtList));
# 340 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                           [_1] 
                   )
# 48 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmtList));
# 351 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                           _1 :: _2 
                   )
# 49 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmtList));
# 363 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'assignment)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               _1 
                   )
# 52 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmt));
# 374 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'question)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               _1 
                   )
# 53 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmt));
# 385 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifElseConditional)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               _1 
                   )
# 54 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmt));
# 396 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifConditional)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               _1 
                   )
# 55 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'stmt));
# 407 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                               Assignment(_2, _1, _4, Position(parseState)) 
                   )
# 58 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'assignment));
# 420 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'qlType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                               Question(_2, _1, _4, Position(parseState)) 
                   )
# 61 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'question));
# 433 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtList)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                               IfElseConditional(_3, _6, _10, Position(parseState)) 
                   )
# 68 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'ifElseConditional));
# 446 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                               IfConditional(_3, _6, Position(parseState)) 
                   )
# 73 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'ifConditional));
# 458 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLBool 
                   )
# 76 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 468 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLString 
                   )
# 77 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 478 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLInt 
                   )
# 78 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 488 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                       QLDecimal 
                   )
# 79 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'qlType));
# 498 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               String(_1) 
                   )
# 82 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'literal));
# 509 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               String(_1) 
                   )
# 83 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'literal));
# 520 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Bool(_1) 
                   )
# 84 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'literal));
# 531 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Int(_1) 
                   )
# 85 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'literal));
# 542 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                               Decimal(_1) 
                   )
# 86 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'literal));
# 553 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           _2 
                   )
# 89 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 564 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           ID(_1, Position(parseState)) 
                   )
# 90 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 575 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Literal(_1, Position(parseState)) 
                   )
# 91 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 586 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           Neg(_2, Position(parseState)) 
                   )
# 92 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 597 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BooleanOp(_1, And, _3, Position(parseState)) 
                   )
# 93 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 609 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BooleanOp(_1, Or, _3, Position(parseState)) 
                   )
# 94 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 621 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BooleanOp(_1, Lt, _3, Position(parseState)) 
                   )
# 95 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 633 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BooleanOp(_1, Gt, _3, Position(parseState)) 
                   )
# 96 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 645 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BooleanOp(_1, Le, _3, Position(parseState)) 
                   )
# 97 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 657 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BooleanOp(_1, Ge, _3, Position(parseState)) 
                   )
# 98 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 669 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BooleanOp(_1, Eq, _3, Position(parseState)) 
                   )
# 99 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 681 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           BooleanOp(_1, Ne, _3, Position(parseState)) 
                   )
# 100 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 693 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           ArithmeticOp(_1, Plus, _3, Position(parseState)) 
                   )
# 101 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 705 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           ArithmeticOp(_1, Minus, _3, Position(parseState)) 
                   )
# 102 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 717 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           ArithmeticOp(_1, Mult, _3, Position(parseState)) 
                   )
# 103 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
# 729 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                                                           ArithmeticOp(_1, Div, _3, Position(parseState)) 
                   )
# 104 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fsp"
                 : 'expression));
|]
# 742 "C:\Users\Edwin\Documents\UvA\Software Construction\Git\EdwinWesterhoud\SoftwConsQL\QL_Fsharp\QL_Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 36;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : QL_Grammar.questionaire =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
