%{
open System
open QL_Grammar
open Microsoft.FSharp.Collections
%}

%token FORM
%token IF ELSE
%token CB_OPEN CB_CLOSE
%token B_OPEN B_CLOSE
%token COLON
%token ASSIGN

%token <string> IDENTIFIER
%token <string> LABEL

%token <bool> BOOL
%token <string> STRING
%token <int> INT
%token <float> DECIMAL

%token QLBOOL QLSTRING QLINT QLDECIMAL
%token EQ NE LT LE GT GE AND OR PLUS MINUS MULT DIV NOT

%left AND OR
%left EQ NE LT LE GT GE
%left PLUS MINUS
%left MULT DIV
%right NOT

%token END

%start start
%type <QL_Grammar.questionaire> start

%%

start:
    | FORM IDENTIFIER CB_OPEN
        stmtList
      CB_CLOSE END              {
                                    {   ID          = $2;
                                        Statements  = $4 }
                                }

stmtList:
    |               { [] }
    | stmt          { [$1] }
    | stmt stmtList { $1 :: $2 }

stmt:
    | assignment        { $1 }
    | question          { $1 }
    | ifElseConditional { $1 }
    | ifConditional     { $1 }

assignment:
    LABEL IDENTIFIER ASSIGN expression  { Assignment($2, $1, $4, Position(parseState)) }

question:
    LABEL IDENTIFIER COLON qlType       { Question($2, $1, $4, Position(parseState)) }

ifElseConditional:
    IF B_OPEN expression B_CLOSE CB_OPEN
        stmtList
    CB_CLOSE ELSE CB_OPEN
        stmtList
    CB_CLOSE                            { IfElseConditional($3, $6, $10, Position(parseState)) }

ifConditional:
    IF B_OPEN expression B_CLOSE CB_OPEN
        stmtList
    CB_CLOSE                            { IfConditional($3, $6, Position(parseState)) }

qlType:
    | QLBOOL    { QLBool }
    | QLSTRING  { QLString }
    | QLINT     { QLInt }
    | QLDECIMAL { QLDecimal }

literal:
    | STRING            { String($1) }
    | LABEL             { String($1) }
    | BOOL              { Bool($1) }
    | INT               { Int($1) }
    | DECIMAL           { Decimal($1) }

expression:
    | B_OPEN expression B_CLOSE     { $2 }
    | IDENTIFIER                    { ID($1, Position(parseState)) }
    | literal                       { Literal($1, Position(parseState)) }
    | NOT expression                { Neg($2, Position(parseState)) }
    | expression AND expression     { BooleanOp($1, And, $3, Position(parseState)) }
    | expression OR expression      { BooleanOp($1, Or, $3, Position(parseState)) }
    | expression LT expression      { BooleanOp($1, Lt, $3, Position(parseState)) }
    | expression GT expression      { BooleanOp($1, Gt, $3, Position(parseState)) }
    | expression LE expression      { BooleanOp($1, Le, $3, Position(parseState)) }
    | expression GE expression      { BooleanOp($1, Ge, $3, Position(parseState)) }
    | expression EQ expression      { BooleanOp($1, Eq, $3, Position(parseState)) }
    | expression NE expression      { BooleanOp($1, Ne, $3, Position(parseState)) }
    | expression PLUS expression    { ArithmeticOp($1, Plus, $3, Position(parseState)) }
    | expression MINUS expression   { ArithmeticOp($1, Minus, $3, Position(parseState)) }
    | expression MULT expression    { ArithmeticOp($1, Mult, $3, Position(parseState)) }
    | expression DIV expression     { ArithmeticOp($1, Div, $3, Position(parseState)) }