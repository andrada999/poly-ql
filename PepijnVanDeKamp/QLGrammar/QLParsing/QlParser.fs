// Implementation file for parser generated by fsyacc
module QlParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
   
open System
open QL.Grammar
open Microsoft.FSharp.Collections   

# 12 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | GREATER_EQUALS_THAN
  | LESS_EQUALS_THAN
  | GREATER_THAN
  | LESS_THAN
  | NOT
  | NOT_EQUALS
  | EQUALS
  | TIMES
  | DIVIDE
  | MINUS
  | PLUS
  | PARENS_CLOSE
  | PARENS_OPEN
  | BRACKET_CLOSE
  | BRACKET_OPEN
  | ASS
  | ELSE
  | IF
  | BOOL_FALSE
  | BOOL_TRUE
  | QL_STRING
  | QL_INTEGER
  | QL_BOOLEAN
  | FORM
  | BOOL of (bool)
  | STRING of (string)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_GREATER_EQUALS_THAN
    | TOKEN_LESS_EQUALS_THAN
    | TOKEN_GREATER_THAN
    | TOKEN_LESS_THAN
    | TOKEN_NOT
    | TOKEN_NOT_EQUALS
    | TOKEN_EQUALS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_PARENS_CLOSE
    | TOKEN_PARENS_OPEN
    | TOKEN_BRACKET_CLOSE
    | TOKEN_BRACKET_OPEN
    | TOKEN_ASS
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_BOOL_FALSE
    | TOKEN_BOOL_TRUE
    | TOKEN_QL_STRING
    | TOKEN_QL_INTEGER
    | TOKEN_QL_BOOLEAN
    | TOKEN_FORM
    | TOKEN_BOOL
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Statement_List
    | NONTERM_Statement
    | NONTERM_Question
    | NONTERM_QuestionType
    | NONTERM_Condition
    | NONTERM_Expression

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | GREATER_EQUALS_THAN  -> 1 
  | LESS_EQUALS_THAN  -> 2 
  | GREATER_THAN  -> 3 
  | LESS_THAN  -> 4 
  | NOT  -> 5 
  | NOT_EQUALS  -> 6 
  | EQUALS  -> 7 
  | TIMES  -> 8 
  | DIVIDE  -> 9 
  | MINUS  -> 10 
  | PLUS  -> 11 
  | PARENS_CLOSE  -> 12 
  | PARENS_OPEN  -> 13 
  | BRACKET_CLOSE  -> 14 
  | BRACKET_OPEN  -> 15 
  | ASS  -> 16 
  | ELSE  -> 17 
  | IF  -> 18 
  | BOOL_FALSE  -> 19 
  | BOOL_TRUE  -> 20 
  | QL_STRING  -> 21 
  | QL_INTEGER  -> 22 
  | QL_BOOLEAN  -> 23 
  | FORM  -> 24 
  | BOOL _ -> 25 
  | STRING _ -> 26 
  | INT _ -> 27 
  | ID _ -> 28 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_GREATER_EQUALS_THAN 
  | 2 -> TOKEN_LESS_EQUALS_THAN 
  | 3 -> TOKEN_GREATER_THAN 
  | 4 -> TOKEN_LESS_THAN 
  | 5 -> TOKEN_NOT 
  | 6 -> TOKEN_NOT_EQUALS 
  | 7 -> TOKEN_EQUALS 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_DIVIDE 
  | 10 -> TOKEN_MINUS 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_PARENS_CLOSE 
  | 13 -> TOKEN_PARENS_OPEN 
  | 14 -> TOKEN_BRACKET_CLOSE 
  | 15 -> TOKEN_BRACKET_OPEN 
  | 16 -> TOKEN_ASS 
  | 17 -> TOKEN_ELSE 
  | 18 -> TOKEN_IF 
  | 19 -> TOKEN_BOOL_FALSE 
  | 20 -> TOKEN_BOOL_TRUE 
  | 21 -> TOKEN_QL_STRING 
  | 22 -> TOKEN_QL_INTEGER 
  | 23 -> TOKEN_QL_BOOLEAN 
  | 24 -> TOKEN_FORM 
  | 25 -> TOKEN_BOOL 
  | 26 -> TOKEN_STRING 
  | 27 -> TOKEN_INT 
  | 28 -> TOKEN_ID 
  | 31 -> TOKEN_end_of_input
  | 29 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Statement_List 
    | 3 -> NONTERM_Statement_List 
    | 4 -> NONTERM_Statement_List 
    | 5 -> NONTERM_Statement 
    | 6 -> NONTERM_Statement 
    | 7 -> NONTERM_Question 
    | 8 -> NONTERM_Question 
    | 9 -> NONTERM_QuestionType 
    | 10 -> NONTERM_QuestionType 
    | 11 -> NONTERM_QuestionType 
    | 12 -> NONTERM_Condition 
    | 13 -> NONTERM_Condition 
    | 14 -> NONTERM_Expression 
    | 15 -> NONTERM_Expression 
    | 16 -> NONTERM_Expression 
    | 17 -> NONTERM_Expression 
    | 18 -> NONTERM_Expression 
    | 19 -> NONTERM_Expression 
    | 20 -> NONTERM_Expression 
    | 21 -> NONTERM_Expression 
    | 22 -> NONTERM_Expression 
    | 23 -> NONTERM_Expression 
    | 24 -> NONTERM_Expression 
    | 25 -> NONTERM_Expression 
    | 26 -> NONTERM_Expression 
    | 27 -> NONTERM_Expression 
    | 28 -> NONTERM_Expression 
    | 29 -> NONTERM_Expression 
    | 30 -> NONTERM_Expression 
    | 31 -> NONTERM_Expression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 31 
let _fsyacc_tagOfErrorTerminal = 29

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | GREATER_EQUALS_THAN  -> "GREATER_EQUALS_THAN" 
  | LESS_EQUALS_THAN  -> "LESS_EQUALS_THAN" 
  | GREATER_THAN  -> "GREATER_THAN" 
  | LESS_THAN  -> "LESS_THAN" 
  | NOT  -> "NOT" 
  | NOT_EQUALS  -> "NOT_EQUALS" 
  | EQUALS  -> "EQUALS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | PARENS_CLOSE  -> "PARENS_CLOSE" 
  | PARENS_OPEN  -> "PARENS_OPEN" 
  | BRACKET_CLOSE  -> "BRACKET_CLOSE" 
  | BRACKET_OPEN  -> "BRACKET_OPEN" 
  | ASS  -> "ASS" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | BOOL_FALSE  -> "BOOL_FALSE" 
  | BOOL_TRUE  -> "BOOL_TRUE" 
  | QL_STRING  -> "QL_STRING" 
  | QL_INTEGER  -> "QL_INTEGER" 
  | QL_BOOLEAN  -> "QL_BOOLEAN" 
  | FORM  -> "FORM" 
  | BOOL _ -> "BOOL" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | GREATER_EQUALS_THAN  -> (null : System.Object) 
  | LESS_EQUALS_THAN  -> (null : System.Object) 
  | GREATER_THAN  -> (null : System.Object) 
  | LESS_THAN  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | NOT_EQUALS  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | PARENS_CLOSE  -> (null : System.Object) 
  | PARENS_OPEN  -> (null : System.Object) 
  | BRACKET_CLOSE  -> (null : System.Object) 
  | BRACKET_OPEN  -> (null : System.Object) 
  | ASS  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | BOOL_FALSE  -> (null : System.Object) 
  | BOOL_TRUE  -> (null : System.Object) 
  | QL_STRING  -> (null : System.Object) 
  | QL_INTEGER  -> (null : System.Object) 
  | QL_BOOLEAN  -> (null : System.Object) 
  | FORM  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 4us; 65535us; 4us; 5us; 8us; 9us; 26us; 27us; 30us; 31us; 4us; 65535us; 4us; 8us; 8us; 8us; 26us; 8us; 30us; 8us; 4us; 65535us; 4us; 10us; 8us; 10us; 26us; 10us; 30us; 10us; 1us; 65535us; 14us; 15us; 4us; 65535us; 4us; 11us; 8us; 11us; 26us; 11us; 30us; 11us; 14us; 65535us; 16us; 17us; 23us; 24us; 33us; 34us; 42us; 43us; 54us; 44us; 55us; 45us; 56us; 46us; 57us; 47us; 58us; 48us; 59us; 49us; 60us; 50us; 61us; 51us; 62us; 52us; 63us; 53us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 8us; 13us; 18us; 20us; 25us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 7us; 8us; 2us; 7us; 8us; 2us; 7us; 8us; 2us; 7us; 8us; 1us; 7us; 11us; 7us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 1us; 7us; 1us; 9us; 1us; 10us; 1us; 11us; 2us; 12us; 13us; 2us; 12us; 13us; 12us; 12us; 13us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 2us; 12us; 13us; 2us; 12us; 13us; 2us; 12us; 13us; 2us; 12us; 13us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 14us; 11us; 14us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 11us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 11us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 11us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 11us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 11us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 11us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 29us; 30us; 31us; 11us; 22us; 23us; 24us; 25us; 26us; 27us; 27us; 28us; 29us; 30us; 31us; 11us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 28us; 29us; 30us; 31us; 11us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 29us; 30us; 31us; 11us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 30us; 31us; 11us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 31us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 19us; 21us; 23us; 25us; 28us; 31us; 34us; 37us; 39us; 51us; 53us; 55us; 57us; 59us; 62us; 65us; 78us; 81us; 84us; 87us; 90us; 92us; 94us; 96us; 98us; 100us; 112us; 114us; 116us; 118us; 120us; 122us; 124us; 126us; 128us; 140us; 152us; 164us; 176us; 188us; 200us; 212us; 224us; 236us; 248us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 274us; 276us; 278us; |]
let _fsyacc_action_rows = 64
let _fsyacc_actionTableElements = [|1us; 32768us; 24us; 2us; 0us; 49152us; 1us; 32768us; 28us; 3us; 1us; 32768us; 15us; 4us; 2us; 16386us; 18us; 22us; 28us; 12us; 1us; 32768us; 14us; 6us; 1us; 32768us; 0us; 7us; 0us; 16385us; 2us; 16386us; 18us; 22us; 28us; 12us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 32768us; 16us; 13us; 1us; 32768us; 26us; 14us; 3us; 32768us; 21us; 21us; 22us; 20us; 23us; 19us; 1us; 16392us; 13us; 16us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 11us; 32768us; 1us; 63us; 2us; 61us; 3us; 62us; 4us; 60us; 6us; 59us; 7us; 58us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 12us; 18us; 0us; 16391us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 1us; 32768us; 13us; 23us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 11us; 32768us; 1us; 63us; 2us; 61us; 3us; 62us; 4us; 60us; 6us; 59us; 7us; 58us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 12us; 25us; 1us; 32768us; 15us; 26us; 2us; 16386us; 18us; 22us; 28us; 12us; 1us; 32768us; 14us; 28us; 1us; 16397us; 17us; 29us; 1us; 32768us; 15us; 30us; 2us; 16386us; 18us; 22us; 28us; 12us; 1us; 32768us; 14us; 32us; 0us; 16396us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 11us; 32768us; 1us; 63us; 2us; 61us; 3us; 62us; 4us; 60us; 6us; 59us; 7us; 58us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 12us; 35us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 0us; 16405us; 2us; 16406us; 8us; 57us; 9us; 56us; 2us; 16407us; 8us; 57us; 9us; 56us; 0us; 16408us; 0us; 16409us; 4us; 16410us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 4us; 16411us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 4us; 16412us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 4us; 16413us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 4us; 16414us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 4us; 16415us; 8us; 57us; 9us; 56us; 10us; 55us; 11us; 54us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; 8us; 32768us; 5us; 42us; 13us; 33us; 19us; 41us; 20us; 40us; 25us; 38us; 26us; 39us; 27us; 37us; 28us; 36us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 7us; 10us; 12us; 14us; 15us; 18us; 19us; 20us; 21us; 23us; 25us; 29us; 31us; 40us; 52us; 53us; 54us; 55us; 56us; 58us; 67us; 79us; 81us; 84us; 86us; 88us; 90us; 93us; 95us; 96us; 105us; 117us; 118us; 119us; 120us; 121us; 122us; 123us; 124us; 133us; 134us; 137us; 140us; 141us; 142us; 147us; 152us; 157us; 162us; 167us; 172us; 181us; 190us; 199us; 208us; 217us; 226us; 235us; 244us; 253us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 6us; 0us; 1us; 2us; 1us; 1us; 7us; 4us; 1us; 1us; 1us; 11us; 7us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 16385us; 65535us; 16388us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 273 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : QL.Grammar.Form)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 282 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement_List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                  
                                                     {  Name = _2; 
                                                        StatementList = _4; }
                                                 
                   )
# 51 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : QL.Grammar.Form));
# 297 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         [] 
                   )
# 57 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Statement_List));
# 307 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                             [_1] 
                   )
# 58 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Statement_List));
# 318 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement_List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                     _1 :: _2 
                   )
# 59 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Statement_List));
# 330 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Question)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         _1 
                   )
# 62 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Statement));
# 341 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                      _1 
                   )
# 63 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Statement));
# 352 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'QuestionType)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                                            ComputedQuestion(_1,_3,_4,_6,Position(parseState)) 
                   )
# 66 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Question));
# 366 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'QuestionType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                     Question(_1,_3,_4,Position(parseState)) 
                   )
# 67 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Question));
# 379 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                          QL_Boolean 
                   )
# 70 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'QuestionType));
# 389 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                            QL_Integer 
                   )
# 71 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'QuestionType));
# 399 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                           QL_String 
                   )
# 72 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'QuestionType));
# 409 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement_List)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement_List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                                                                                                                IfThenElse(_3,_6,_10,Position(parseState)) 
                   )
# 75 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Condition));
# 422 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement_List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                                                                 IfThen(_3,_6,Position(parseState)) 
                   )
# 76 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Condition));
# 434 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         _2 
                   )
# 80 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 445 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         Id(_1) 
                   )
# 81 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 456 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         LiteralStatement(Integer(_1)) 
                   )
# 82 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 467 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         LiteralStatement(Boolean(_1)) 
                   )
# 83 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 478 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         LiteralStatement(String(_1)) 
                   )
# 84 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 489 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                      LiteralStatement(Boolean(true)) 
                   )
# 85 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 499 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         LiteralStatement(Boolean(false)) 
                   )
# 86 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 509 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                   Neg(_2) 
                   )
# 87 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 520 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                      ArithmeticExpression(_1,Plus,_3) 
                   )
# 88 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 532 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         ArithmeticExpression(_1,Minus,_3) 
                   )
# 89 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 544 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         ArithmeticExpression(_1,Divide,_3) 
                   )
# 90 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 556 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         ArithmeticExpression(_1,Times,_3) 
                   )
# 91 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 568 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         BinaryExpression(_1,Equals,_3) 
                   )
# 92 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 580 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         BinaryExpression(_1,NotEquals,_3) 
                   )
# 93 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 592 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         BinaryExpression(_1,LessThan,_3) 
                   )
# 94 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 604 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         BinaryExpression(_1,LessEqualsThan,_3) 
                   )
# 95 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 616 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         BinaryExpression(_1,GreaterThan,_3) 
                   )
# 96 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
# 628 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                                         BinaryExpression(_1,GreaterEqualsThan,_3) 
                   )
# 97 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Expression));
|]
# 641 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 32;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : QL.Grammar.Form =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
