// Implementation file for parser generated by fsyacc
module QlParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
   
open System
open QL.Grammar
open Microsoft.FSharp.Collections   

# 12 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PARENS_CLOSE
  | PARENS_OPEN
  | BRACKET_CLOSE
  | BRACKET_OPEN
  | ASS
  | MONEY
  | INTEGER
  | BOOLEAN
  | FORM
  | STRING of (string)
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PARENS_CLOSE
    | TOKEN_PARENS_OPEN
    | TOKEN_BRACKET_CLOSE
    | TOKEN_BRACKET_OPEN
    | TOKEN_ASS
    | TOKEN_MONEY
    | TOKEN_INTEGER
    | TOKEN_BOOLEAN
    | TOKEN_FORM
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Question_List
    | NONTERM_Question
    | NONTERM_QuestionType

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PARENS_CLOSE  -> 1 
  | PARENS_OPEN  -> 2 
  | BRACKET_CLOSE  -> 3 
  | BRACKET_OPEN  -> 4 
  | ASS  -> 5 
  | MONEY  -> 6 
  | INTEGER  -> 7 
  | BOOLEAN  -> 8 
  | FORM  -> 9 
  | STRING _ -> 10 
  | FLOAT _ -> 11 
  | INT _ -> 12 
  | ID _ -> 13 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PARENS_CLOSE 
  | 2 -> TOKEN_PARENS_OPEN 
  | 3 -> TOKEN_BRACKET_CLOSE 
  | 4 -> TOKEN_BRACKET_OPEN 
  | 5 -> TOKEN_ASS 
  | 6 -> TOKEN_MONEY 
  | 7 -> TOKEN_INTEGER 
  | 8 -> TOKEN_BOOLEAN 
  | 9 -> TOKEN_FORM 
  | 10 -> TOKEN_STRING 
  | 11 -> TOKEN_FLOAT 
  | 12 -> TOKEN_INT 
  | 13 -> TOKEN_ID 
  | 16 -> TOKEN_end_of_input
  | 14 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Question_List 
    | 3 -> NONTERM_Question_List 
    | 4 -> NONTERM_Question_List 
    | 5 -> NONTERM_Question 
    | 6 -> NONTERM_QuestionType 
    | 7 -> NONTERM_QuestionType 
    | 8 -> NONTERM_QuestionType 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 16 
let _fsyacc_tagOfErrorTerminal = 14

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PARENS_CLOSE  -> "PARENS_CLOSE" 
  | PARENS_OPEN  -> "PARENS_OPEN" 
  | BRACKET_CLOSE  -> "BRACKET_CLOSE" 
  | BRACKET_OPEN  -> "BRACKET_OPEN" 
  | ASS  -> "ASS" 
  | MONEY  -> "MONEY" 
  | INTEGER  -> "INTEGER" 
  | BOOLEAN  -> "BOOLEAN" 
  | FORM  -> "FORM" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PARENS_CLOSE  -> (null : System.Object) 
  | PARENS_OPEN  -> (null : System.Object) 
  | BRACKET_CLOSE  -> (null : System.Object) 
  | BRACKET_OPEN  -> (null : System.Object) 
  | ASS  -> (null : System.Object) 
  | MONEY  -> (null : System.Object) 
  | INTEGER  -> (null : System.Object) 
  | BOOLEAN  -> (null : System.Object) 
  | FORM  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 4us; 5us; 8us; 9us; 2us; 65535us; 4us; 8us; 8us; 8us; 1us; 65535us; 12us; 13us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; |]
let _fsyacc_action_rows = 17
let _fsyacc_actionTableElements = [|1us; 32768us; 9us; 2us; 0us; 49152us; 1us; 32768us; 13us; 3us; 1us; 32768us; 4us; 4us; 1us; 16386us; 13us; 10us; 1us; 32768us; 3us; 6us; 1us; 32768us; 0us; 7us; 0us; 16385us; 1us; 16386us; 13us; 10us; 0us; 16388us; 1us; 32768us; 5us; 11us; 1us; 32768us; 10us; 12us; 3us; 32768us; 6us; 16us; 7us; 15us; 8us; 14us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 7us; 9us; 11us; 13us; 14us; 16us; 17us; 19us; 21us; 25us; 26us; 27us; 28us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 6us; 0us; 1us; 2us; 4us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 16385us; 65535us; 16388us; 65535us; 65535us; 65535us; 16389us; 16390us; 16391us; 16392us; |]
let _fsyacc_reductions ()  =    [| 
# 157 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : QL.Grammar.Form)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 166 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Question_List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                  
                                                     {  Name = _2; 
                                                        QuestionList = _4; }
                                                 
                   )
# 34 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : QL.Grammar.Form));
# 181 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                               [] 
                   )
# 39 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Question_List));
# 191 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Question)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                      [_1] 
                   )
# 40 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Question_List));
# 202 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Question)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Question_List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                 _1 :: _2 
                   )
# 41 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Question_List));
# 214 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'QuestionType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                                            {QuestionId = _1; QuestionString = _3; QuestionType = _4; } 
                   )
# 43 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'Question));
# 227 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                     QL_Boolean 
                   )
# 46 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'QuestionType));
# 237 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                       QL_Integer 
                   )
# 47 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'QuestionType));
# 247 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                                     QL_Money 
                   )
# 48 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fsp"
                 : 'QuestionType));
|]
# 258 "C:\Users\p3pij_000\Documents\GitHub\poly-ql\PepijnVanDeKamp\QLGrammar\QLParsing\QlParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 17;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : QL.Grammar.Form =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
