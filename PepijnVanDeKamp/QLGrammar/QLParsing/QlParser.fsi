// Signature file for parser generated by fsyacc
module QlParser
type token = 
  | EOF
  | PARENS_CLOSE
  | PARENS_OPEN
  | BRACKET_CLOSE
  | BRACKET_OPEN
  | ASS
  | MONEY
  | INTEGER
  | BOOLEAN
  | FORM
  | STRING of (string)
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PARENS_CLOSE
    | TOKEN_PARENS_OPEN
    | TOKEN_BRACKET_CLOSE
    | TOKEN_BRACKET_OPEN
    | TOKEN_ASS
    | TOKEN_MONEY
    | TOKEN_INTEGER
    | TOKEN_BOOLEAN
    | TOKEN_FORM
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Question_List
    | NONTERM_Question
    | NONTERM_QuestionType
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (QL.Grammar.Form) 
