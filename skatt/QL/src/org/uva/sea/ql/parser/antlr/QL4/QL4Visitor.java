package org.uva.sea.ql.parser.antlr.QL4;

import org.uva.sea.ql.parser.antlr.QL4.AST.*;

import QL4.QL4BaseVisitor;
import QL4.QL4Parser;

/**
 * A visitor for the QL4 grammar. Visits a tree parsed by the Antlr4
 * generated QL4parser on the QL4 grammar. Extends the QL4BaseVisitor
 * generated by Antrl4 and implements any function that needs
 * a more sophisticated visit  than depth first
 * @author Sammie Katt
 *
 */
public class QL4Visitor extends QL4BaseVisitor<QLTree> {

  // Handles the information printed
  boolean verbose = true;

  /**
   * Specifies behavior when visiting the form 
   * it will simply visit its structures and return the tree
   * generated throughout the visiting process
   * 
   * @param ctx is the context of the structures
   * @return the generated tree by visiting its childs
   */
  public QLTree visitForm(QL4Parser.FormContext ctx) {
	  if (verbose) 
	      System.out.println("Visiting Form");
	
	  return new QL4Form(ctx.structures().accept(this));
  }
  
  /**
   * Returns a structures object, containing its structure in a list
   * 
   * @param ctx is the structures context from which structure(s) are extracted
   * @return the structures object
   */
  public QLTree visitStructures(QL4Parser.StructuresContext ctx) {
	  if (verbose)
		  System.out.println("Visiting structures");
		  
	  QL4Structures structures= new QL4Structures();
	  
	  for (QL4Parser.StructureContext struct : ctx.structure()) {
		  structures.addStructure(struct.accept(this));
	  }
	  
	  return structures;
  }

  /**
   * Returns a conditional object 
   * @param ctx the conditional context
   * @return a conditional object 
   */
  public QLTree visitConditional(QL4Parser.ConditionalContext ctx) {
	 if (verbose)  
		 System.out.println("Visiting conditional");
	 
	 return new QL4Conditional();
  }
  
  /**
   * Returns a question object, containing its content:
   * Type, label, id and value
   * @param ctx
   * @return
   */
  public QLTree visitRegQuestion(QL4Parser.RegQuestionContext ctx) {
	  if (verbose) 
		  System.out.println("Visiting Question");
	  
	  return new QL4RegQuestion(); // TODO
  }
  
  /**
   * Returns a plus object with the appropriate lhs and rhs
   * @param ctx contains the lhs and rhs
   * @return a plus object 
   */
  public QLTree visitPlusExpr(QL4Parser.PlusExprContext ctx) {
	  /*
	  IExpr lhs = ctx.lhs.accept(this);
	  IExpr rhs = ctx.rhs.accept(this);
	  return new Plus(lhs, rhs)
	  */
	  if (verbose) 
		  System.out.println("Visiting plus expr");
	  
	  return null;
  }
  
}
