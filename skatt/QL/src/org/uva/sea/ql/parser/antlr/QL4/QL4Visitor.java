package org.uva.sea.ql.parser.antlr.QL4;

import org.uva.sea.ql.parser.antlr.QL4.AST.*;

import QL4.QL4BaseVisitor;
import QL4.QL4Parser;

/**
 * A visitor for the QL4 grammar. Visits a tree parsed by the Antlr4
 * generated QL4parser on the QL4 grammar. Extends the QL4BaseVisitor
 * generated by Antrl4 and implements any function that needs
 * a more sophisticated visit  than depth first
 * @author Sammie Katt
 *
 */
public class QL4Visitor extends QL4BaseVisitor<IQLTree> {

  // Handles the information printed
  boolean verbose = true;
  
  /*
   *  contains all identifiers and their values
   *  Is updated whenever a question is filled in 
   *  TODO
   */
  // Map<String, Value> variables = new HashMap<String, Value>();
  
    ///////////////////// visiting upper structures
  
  /**
   * Specifies behavior when visiting the form 
   * it will simply visit its structures and return the tree
   * generated throughout the visiting process
   * 
   * @param ctx is the context of the structures
   * @return the generated tree by visiting its childs
   */
  public IQLTree visitForm(QL4Parser.FormContext ctx) {
    if (verbose) 
      System.out.println("Visiting Form");

    QL4Form form = new QL4Form();
    
    form.setStructures(ctx.structures().accept(this));    
    return form;
  }

  /**
   * Returns the addition of the context when visiting
   * the plus expression.
   * @param ctx is the context of the addition
   * @return a QLdouble, whose value is the evaluation of the expression
   */
  public IQLTree visitPlusExpr(QL4Parser.PlusExprContext ctx) {
	  /*
	  IExpr lhs = ctx.lhs.accept(this);
	  IExpr rhs = ctx.rhs.accept(this);
	  return new Plus(lhs, rhs)
	  */
	  if (verbose) 
		  System.out.println("Visiting plus expr");
	  
	  return null;
  }
  
}
