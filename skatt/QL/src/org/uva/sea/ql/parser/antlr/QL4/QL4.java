package org.uva.sea.ql.parser.antlr.QL4;

import java.util.List;

import javax.swing.JFileChooser;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.uva.sea.ql.parser.antlr.QL4.AST.*;
import org.uva.sea.ql.parser.antlr.QL4.Visitors.AntlrVisitor;
import org.uva.sea.ql.parser.antlr.QL4.Visitors.UndefinedCheck;
import org.uva.sea.ql.parser.antlr.QL4.TypeChecker.QLErrorMsg;
import QL4.*;

/**
 * This class will request a file and attempt to visit it using QL4 parser
 * generated by applying antlr4 on QL4 grammar
 * 
 * @author Sammie Katt
 * 
 */
public class QL4 {

	/**
	 * Automatically called, ignores
	 * 
	 * @param args
	 *            are ignored
	 * @throws Exception
	 *             generated by incorrectly (according to QL4 grammar) syntax in
	 *             files
	 */
	public static void main(String[] args) throws Exception {

		// get questionary
		String fileToParse = chooseFile();

		// process file into tokens
		ANTLRFileStream fStream = new ANTLRFileStream(fileToParse);
		QL4Lexer lexer = new QL4Lexer(fStream);
		CommonTokenStream tokens = new CommonTokenStream(lexer);

		// create antlr tree from tokens
		QL4Parser parser = new QL4Parser(tokens);
		ParseTree tree = parser.form();

		// parse antlr tree into own abstract tree
		AntlrVisitor ASTParser = new AntlrVisitor();
		QLTree ast = tree.accept(ASTParser);
		
		System.out.println(ast);
		
		// typecheck abstract tree
		UndefinedCheck ASTChecker = new UndefinedCheck();
		List<QLErrorMsg> checks = ast.accept(ASTChecker);
		
		System.out.println(checks);
	}

	/**
	 * Uses JFileChooser to let the user browse and pick a file and returns the
	 * path
	 * 
	 * @return the path of the file the user has chosen
	 */
	private static String chooseFile() {
		// initiate JFileChooser and set settings
		JFileChooser chooser = new JFileChooser();
		chooser.setCurrentDirectory(new java.io.File("."));
		chooser.setDialogTitle("Please choose the file to parse");
		chooser.setAcceptAllFileFilterUsed(false);

		// request file
		if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
			return chooser.getSelectedFile().getAbsolutePath();
		}

		// exit if no file was chosen
		System.err.println("Error at choosing file");
		System.exit(0);
		return null;
	}
}
