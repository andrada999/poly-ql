%package org.uva.sea.ql.parser.jacc

%{
import org.uva.sea.ql.ast.*;
import org.uva.sea.ql.ast.literal.*;
import org.uva.sea.ql.ast.operators.arithmetic.*;
import org.uva.sea.ql.ast.operators.logical.*;
import org.uva.sea.ql.ast.operators.comparison.*;
import org.uva.sea.ql.ast.statement.*;
import org.uva.sea.ql.ast.type.*;
%}

%class QLParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.ASTNode 
%start top 

%token <Identifier> IDENTIFIER
%token <IntLiteral> INTEGER
%token <MoneyLiteral> MONEY
%token <StringLiteral> STRING
%token <BoolLiteral> BOOLEAN

//operators
%token '*' '/' '+' '-' AND OR NEQ EQ '<' LEQ '>' GEQ '!' '='
%token '(' ')' '{' '}' ':'

//keywords
%token FORM IF ELSE

//associativity
%left AND
%left OR
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

//nonterminals
%type <ASTNode> astnode
%type <Form> form
%type <QuestionSet> statements
%type <Statement> statement
%type <Question> question
%type <If> ifThen
%type <IfElse> ifThenElse
%type <Expression> expression
%type <Type> type

%{
import org.uva.sea.ql.ast.*;
%}

%%

 top : astnode {result = $1;}
     ;
     
 astnode : form
         | statement
 		 | expression
 		 ;
 
            
 form : FORM IDENTIFIER '{' statements '}' {$$ = new Form($2,$4);}
 	  ; 

 statements : statement statements {$$ = new QuestionSet($1,$2);}
 		    | statement			   {$$ = new QuestionSet($1);}
 		    ;
 		    
 statement : question
       	   | ifThen
       	   | ifThenElse
 		   ;
 		   
 question : IDENTIFIER ':' STRING type '(' expression ')' {$$ = new ExprQuestion($1,$3,$4,$6);}
 		  | IDENTIFIER ':' STRING type                    {$$ = new Question($1,$3,$4);}
          ;
  
 ifThen : IF '(' expression ')' '{' statements '}' {$$ = new If($3,$6);}
 	    ;   
 	       
 ifThenElse : IF '(' expression ')' '{' statements '}' ELSE '{' statements '}'{$$ = new IfElse($3,$6,$10);} 
 			;
 
 expression : logical
 			| arithmetic
 			| comparison
 		    | '(' expression ')'		{ $$ = $2; }
 		    | IDENTIFIER     			{ $$ = $1; }
		    | INTEGER					{ $$ = $1; }
		    | BOOLEAN					{ $$ = $1; }
		    | STRING					{ $$ = $1; }
		    ;			
 			
arithmetic : '+' expression	%prec UPLUS { $$ = new Pos($2); }
		   | '-' expression	%prec UMIN  { $$ = new Neg($2); }
		   | expression '*' expression	{ $$ = new Mul($1, $3); }
		   | expression '/' expression 	{ $$ = new Div($1, $3); }
		   | expression '+' expression	{ $$ = new Add($1, $3); }
		   | expression '-' expression	{ $$ = new Sub($1, $3); } 
		;			

logical : '!' expression %prec UNOT  { $$ = new Not($2); }
		| expression AND expression	 { $$ = new And($1, $3); }
	    | expression OR expression   { $$ = new Or($1, $3); }
		;
		
comparison : expression EQ expression 	{ $$ = new Eq($1, $3); }
		   | expression NEQ expression	{ $$ = new NEq($1, $3); }
		   | expression '>' expression	{ $$ = new GT($1, $3); }
		   | expression '<' expression	{ $$ = new LT($1, $3); }
		   | expression GEQ expression	{ $$ = new GEq($1, $3); }
		   | expression LEQ expression  { $$ = new LEq($1, $3); }
     	   ;
		   
 type : STRING  { $$ = new StringType(); }
      | INTEGER { $$ = new IntType(); }
      | BOOLEAN { $$ = new BoolType(); }
      | MONEY   { $$ = new MoneyType(); }
      ;

%%
private QLLexer lexer; 

private ASTNode result;

public ASTNode getResult() {
  return result;
}

public QLParser(QLLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}