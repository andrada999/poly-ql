##LANGUAGE 'C#'
##TEMPLATE-NAME 'Grammar data file'
##ENGINE-NAME 'Grammar Data'
##SYSTEM-VERSION '5.0'
##AUTHOR 'Omar Pakker'
##FILE-EXTENSION 'cs'
##NOTES
This template creates the rule and symbol
classes for the grammer. Each project that
extends the grammar needs this file to be generated.
##END-NOTES
##ID-CASE ProperCase
##ID-SEPARATOR '_'
##DELIMITER ','
##PARAMETERS
/*
 * Grammar Information:
 *
 * Name            : %Name%
 * Version         : %Version%
 * Author          : %Author%
 * About           : %About%
 * Case Sensitive  : %CaseSensitive%
 * Start Symbol    : %StartSymbol%
 *
 *
 * Grammar Build Information:
 *
 * Output File Path : %OutputFilePath%
 * Output Path      : %OutputPath%
 * Output File      : %OutputFile%
 * Output File Base : %OutputFileBase%
 *
##END-PARAMETERS
##SYMBOL-TABLE
 * Symbol Count : %Count%
##END-SYMBOL-TABLE
##RULE-TABLE
 * Rule Count   : %Count%
##END-RULE-TABLE
 */
using System.Collections.Generic;
using System.Collections.ObjectModel;

##PARAMETERS
namespace Grammar.Generated.%Version%
##END-PARAMETERS
{
    public static class GrammarData
    {
##SYMBOL-TABLE
        public const int SymbolCount = %Count%;
##END-SYMBOL-TABLE
##RULE-TABLE
        public const int RuleCount = %Count%;
##END-RULE-TABLE

        public static readonly ReadOnlyDictionary<ushort, string> Rules = new ReadOnlyDictionary<ushort, string>(
            new Dictionary<ushort, string>()
            {
##RULES
                { %Value%, "%ID%" }%Delimiter% %Col:75% // %Description%
##END-RULES
            }
        );
    };
}


/*
 * Pre-build switch covering all the rules
 */
#region Rules Switch
//switch (Rules[r.Production.TableIndex])
//{
##RULES
//    //%Description%
//    case "%ID%":
//        return;

##END-RULES
//    default:
//        return;
//}
#endregion
