"Name"     = 'Questionaire Language'
"Author"   = 'Omar Pakker'
"Version"  = 'v2'
"About"    = 'A grammar for Questionaires.'

"Start Symbol"   = <Forms>
"Case Sensitive" = True

! -------------------------------------------------
! Character Sets
! -------------------------------------------------
{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------
Identifier    = {ID Head}{ID Tail}*

StringLit = '"' ( {String Chars} | '\' {Printable} )* '"'
IntLit    = {Digit}+
RealLit   = {Digit}*'.'{Digit}+
BoolLit   = 'true' | 'false'
!2014-02-20T08:32:08+00:00
!2014-02-20T08:32:08Z
DateLit   = {Digit}{Digit}{Digit}{Digit}'-'[01]{Digit}'-'[0123]{Digit}'T'[012]{Digit}':'[012345]{Digit}':'[012345]{Digit}([+-][012]{Digit}':'[012345]{Digit}|'Z')

Comment Line = '//'
Comment Start = '/*'
Comment End   = '*/'

! -------------------------------------------------
! Types
! -------------------------------------------------
<Type>        ::= string
               |  int
               |  real
               |  bool
               |  date

! -------------------------------------------------
! Rules
! -------------------------------------------------
<Forms>       ::= <Form> <Forms>
               |  <Form>

<Form>        ::= form Identifier <Block>

<Block>       ::= '{' <Statements> '}'

<Statements>  ::= <Statement> <Statements>
               |  <Statement>

<Statement>   ::= if '(' <Expression> ')' <Statement> <OptElse>
               |  <Block>
               |  <Question>
               |  goto Identifier ';'
               |  loop '(' <Expression> ')' <Statement>

! GOLD parser will choose 'shift' over 'reduce' for this,
! which we want since we want the 'else' to associate with
! the innermost 'if'.
<OptElse>     ::= else <Statement>
               |  <>

<VarDecl>     ::= Identifier ':' <Type>

<VarAssign>   ::= Identifier ':' <Type> '=' <Expression>

<Question>    ::= StringLit '>>' <VarDecl> ';'
               |  StringLit '<<' <VarAssign> ';'
			   |  StringLit '<<' <Expression> ';'

<Expression>  ::= <OrExpr> '?' <OrExpr> ':' <Expression>
               |  <OrExpr>

<OrExpr>      ::= <OrExpr> '||' <AndExpr>
               |  <AndExpr>

<AndExpr>     ::= <AndExpr> '&&' <EqExpr>
               |  <EqExpr>

<EqExpr>      ::= <EqExpr> '==' <CompExpr>
               |  <EqExpr> '!=' <CompExpr>
               |  <CompExpr>

<CompExpr>    ::= <CompExpr> '<'  <AddExpr>
               |  <CompExpr> '>'  <AddExpr>
               |  <CompExpr> '<=' <AddExpr>
               |  <CompExpr> '>=' <AddExpr>
               |  <AddExpr>

<AddExpr>     ::= <AddExpr> '+' <MultExpr>
               |  <AddExpr> '-' <MultExpr>
               |  <MultExpr>

<MultExpr>    ::= <MultExpr> '*' <PowerExpr>
               |  <MultExpr> '/' <PowerExpr>
			   |  <MultExpr> '%' <PowerExpr>
               |  <PowerExpr> 

<PowerExpr>   ::= <PowerExpr> '^' <NegateExpr>
               |  <NegateExpr>

<NegateExpr>  ::= '-' <Value>
               |  '!' <Value>
               |  <Value>

<Value>       ::= Identifier
               |  <Literal>
               |  '(' <Expression> ')'

<Literal>     ::= StringLit
               |  IntLit
               |  RealLit
               |  BoolLit
               |  DateLit
